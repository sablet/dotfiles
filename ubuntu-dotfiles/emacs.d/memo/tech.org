 2016
* 02
** <2016-02-07 日>
日付わからん→
1. dateコマンド
2. 右上のカレンダーから見る
3. 平成は下みたいにするかググる。
西暦20**年 = 平成(**+12)年

** <2016-02-14 日 20:10>
   ipythonの初期化ファイルは以下のものだが、記述の仕組みは今ひとつわからない。
もう少しipython使いこなすならintroduction読んでもいいと思う。
とりあえず今回はnumpy,scipy,pyplotを入れといた。
 ~/.config/ipython/profile_default/ipython_config.py
Introduction to IPython configuration#profiles — IPython公式ドキュメント

** <2016-02-14 日 20:50>
numpyで一行目がテキストのcsv読み込むとき
atol=np.genfromtxt('atol_audusd.csv',delimiter=',',names=True,usecols=13)

numpy配列の要素がtupleで展開したいとき
from itertools import chain
atol=np.array(list(chain.from_iterable(atol)))

pythonでコマンドラインからの引数
import sys
sys.argv[1]

graph書くやつ
import matplotlib.pyplot as plt

変数が未定義か調べる
# ローカルスコープでチェック
if 'abc' in globals():
    # あった場合の処理
else:
    # なかった場合の処理

python数値に型変換
int("14")

len(sys.argv)は入れた変数の数+1

pythonで拡張子と名前分離
import os
fname,ext=os.path.splitext(sys.argv[1])

** <2016-02-17 水 12:20>
pythonenv いろいろやってみる

#!/bin/sh
mkdir ~/pythonenv
virtualenv -p /usr/bin/python2.7 venv27
. venv27/bin/activate

** <2016-02-20 土 10:18>
   お天気サイトの気温や降水確率がテキストとして表示されているので、API使わずにクローラーでこれを取ってきて貯めれば割と使えるかも。
   http://www.tenki.jp/forecast/6/

** <2016-02-20 土 12:17>
wget 
-q 経過のログなし
-O 標準出力にファイル表示
ex. wget -q -O - http://hogehoge.jp

date +%Y%m%d : 20160220
date +%D 02/20/16

grep
-P perl風正規表現
-o only (業単位ではなく、一致部分のみ取り出す)

** <2016-02-21 日 13:30>
いつものアップデートマネージャーでアップグレードがあるということで、いつもより大幅に更新するんだろうぐらいしか考えていなかった。実際にはOSのアップグレード(？)みたいな感じでシステムのデータが結構大きく変化した。幸い部分アップグレードは/home/nikke も無事だし、全てが更新したわけではないのでそんなに被害は少ないが、日本語入力できないしfirefox,texあたりはなくなってるしでそこそこ時間を食ってしまった。システムの勉強には悪くないのかもしれないが、忙しい時にこんなの発生したらほんとに切れたくなりそう。ひとまず次回アップデートに備えて今回入れなおしたものを書いておく

latex(jp)関係:
texlive ひとまずこれ
texlive-doc-ja texliveだけではplatexすらできなかった
texlive-science argorithmcとかasymathとか各種数学パッケージ

日本語入力：
はじめはmozc-jaが表示されていたが日本語は入力できなかった。いつもと違う感じなのは、いつも使ってたfcitxではなくibusだったからのよう。初期に触ったきりで入力メソッドの存在を認識できていなかった。ps_killでibusきったらなんか困ったことになった。ググってみるとim-configを起動してibusからfcitxに移った方が安全っぽい。このとき以下実行したが必要かは不明。

apt_install fcitx fcitx-mozc

そのあとはfcitxからmozcのみ触るように設定するとだいたいのアプリではmozが使えるようになった。emacsはこれだけではうまくいかなかったが以下を実行することで解決。もちろんこれは以前にemacsでいろいろ設定していたからうまくいったのだけれど。

apt_install emacs-mozc

他ツール:
apt_install firefox, chromium-browser (keepのためにも), epiphany 
nosubとか見るために flushplugin-installer


Dash(superキー)からアプリが起動できない：
sudo apt-get purge unity-lens-applications    
sudo apt-get install unity-lens-applications 

** <2016-02-21 日 14:15>
workspaceは今まで使ってこなかったが、左にemacsとevinceを開いている状態を毎回2つ切り替えるのはめんどくさかったのでうまく使えば結構便利かも。
workspace切り替え 
C-A-矢印キー
アクティブなウインドウを別ワークスペースに移す 
C-A-Shift-矢印キー
** <2016-02-24 水 07:23>
LINEが使えるみたいにスタートからは見えたのに実際にはWINEはなくなって使えなかった。そこは入ってないって言って欲しかった…WINE入れたら使えるみたい。
** <2016-02-24 水 09:08>
pythonの環境をもう一度頑張ってつくってみた。virtualenvなどはQiitaなどでは今ひとつよくわからなかったが公式見たら順番にやれば解決した。やっぱり困ったときは公式は真理かもしれない。あとscipy,matplolibがpipで入らない問題に直撃した。なんかいろいろやったけど結局aptでこの２つとってきて必要なもの(gccとかもろもろ)入れて、そのあとpip install でうまくいった。むっちゃいろいろ調べたのにもうわけわからん…。ただ前に研究室のPCで同じ条件でやったときはscipyがうまくいかなかったので、aptのgfortranが一応鍵だったのかもしれない。なんかchainerはすぐに入ってしまった。

   今回やったのは

apt_install virtualenvwrapper gfortran # scipy用

zshrcに以下追記↓
export WORKON_HOME=~/workspace
mkdir -p $WORKON_HOME
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh

cd workspace 
virtualenv -p /usr/bin/python2.7 env2
pip install scipy matplotlib chainer 

うっかりeasy_installでpip動かなくなった
結局理由よくわからんけどvirtaulenv内の話だったので別の環境作ってやった。

pythonの二次元配列（リスト内表記）
arr = [[0 for i in range(3)] for j in range(5)]
** <2016-02-24 水 12:00>
お天気インジケータ
sudo add-apt-repository ppa:atareao/atareao;sudo apt-get update;sudo apt-get install -y my-weather-indicator

* 03
** <2016-03-02 水 18:55>
monogodb install
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
sudo apt-get update
sudo apt-get install mongodb mongodb-common 
sudo service mongodb start
sudo service mongodb stop
sudo service mongodb restart

sudo npm install -g mean-cli 

** <2016-03-03 木 19:30>
perlの正規表現調べるのにreplyが必要
irbみたいなもの
いろいろ調べて入れられたけど結局ubuntuとかなら下で入れられるらしい。
apt_install lib*-perl

** <2016-03-03 木 19:33>
管理者権限でヒアドキュメント書き込み
sudo tee /etc/hogehoge.conf <<EOF
this is a hove
EOF

** <2016-03-03 木 21:38>
perlの複数行置換。mはいらないかも。
$ echo "hoge\nfuga\npiyo" | perl -0pe 's/ge\nfu//m'
hoga
piyo
後方参照は\1,\2

perlワンライナーとして動作させるために、「-e」オプションを付与してコマンドラインに入力した文字列（'s/foo/bar/g'）をスクリプトにします。
perl -e 's/foo/bar/g' *.txt
繰り返し処理と標準出力をさせるには、「-p」オプションを付与します。
% perl -pe 's/foo/bar/g' *.txt
元のファイルに上書きすると同時にバックアップを作成したい場合は、-iオプションに「.bak」などの拡張子を付与します。
% perl -pi.bak -e 's/foo/bar/g' *.txt
-lオプションで改行なしで扱う
-aオプションでawkみたいに@Fに値を格納
-Fで分割セパレータ指定
-iでファイルに出力
-i".bak"でバックアプ作成

とりえあず今日のバイトはこれでできていた。
ls|xargs perl -0pi -e 's/(<p class="bold">[\s\S]*?<\/p>)/<!--\n\1\n-->/m'
ls|xargs perl -0pi'old/.bak' -e 's/(<p class="bold">[\s\S]*?<\/p>)/<!--\n\1\n-->/m'

** <2016-03-05 土 22:22>
Googleから上位リンクをとってきてfirefoxで開く機能をシェルで作った。
シェルが空白をうまく扱ってくれない。echoで表示すればなんとかうまくいった。ただ二重に``を使うため中の``をエスケープすることで二重に使った。
temp=`wget -O - \`echo ${str1}${keyword}${str2}\`|pcregrep -o '<h3 class="r">[\s\S]*?</h3>'|pcregrep -o '(http[\s\S]*?)"'`

下手に置換するより割と便利なので使っていきたい。

以下は、改行をすべて削除する例。
cat ./src.txt | tr -d '\n' > ./dst.txt
以下は、改行をカンマに変換して全部で1行にする例。
cat ./src.txt | tr '\n' ',' > ./dst.txt

${変数名#パターン} → 前方一致でのマッチ部分削除(最短マッチ)
${変数名##パターン} → 前方一致でのマッチ部分削除(最長マッチ)
${変数名%パターン} → 後方一致でのマッチ部分削除(最短マッチ)
${変数名%%パターン} → 後方一致でのマッチ部分削除(最長マッチ)
${変数名/置換前文字列/置換後文字列} → 文字列置換(最初にマッチしたもののみ)
${変数名//置換前文字列/置換後文字列} → 文字列置換(マッチしたものすべて)

** <2016-03-06 日 10:55>
結局Googleのソースをwgetと正規表現でクエリを取ってくるのは、いくつかの日本語処理がうまくいかなかったりで思ったようにはいかなかった。
jsonのAPI見てみたら普通にURLにパラメータ渡す方法で簡単にjson取れるよう。しかもapt_install jq で入れたパーサー使って思いの外簡単にjson処理できた。最初からAPI調べておけばよかった。
wget -O - "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q='水筒'"|jq '.responseData.results | .[].cacheUrl'|xargs firefox > /dev/null 2>&1

またGUI入力ウインドウには標準のzenityというものがあるそう。

JavaScriptを使用しない方法
以下のURLにパラメータを付加してアクセスすることで、結果を直接JSONで受け取れます。
検索対象 	URL
Web検索 	http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=test
画像検索 	http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=test
動画検索 	http://ajax.googleapis.com/ajax/services/search/video?v=1.0&q=test
ローカル検索 	http://ajax.googleapis.com/ajax/services/search/local?v=1.0&q=test
ニュース検索 	http://ajax.googleapis.com/ajax/services/search/news?v=1.0&q=test

エンコード
echo テスト | nkf -WwMQ | tr = %
デコード
trを使わずに手っ取り早くやるには
echo %E3%83%86%E3%82%B9%E3%83%88 | nkf --url-input
echo %E3%83%86%E3%82%B9%E3%83%88 | nkf -s --url-input

#配列要素の取り出し
DIVISION=("FUN" "PLN" "PRT" "MAM" "HUM" "VRT")
echo ${DIVISION[0]}     # FUN
echo ${DIVISION[@]:2:2} # PRT MAM
echo ${DIVISION[@]:2}   # PRT MAM HUM VRT
echo ${DIVISION[${#DIVISION[@]}-1]} #VRT

#for文利用1
for (( i = 0; i < ${#DIVISION[@]}; ++i ))
do
    echo ${DIVISION[$i]}
done
 
#for文利用2
for domain in ${DIVISION[@]}
do
    echo ${domain}
done
 
** <2016-03-07 月 00:27>
platexしたら突然↓みたいなエラーが出た。
l.111@writ...
最初は誤ったコマンドでも書いたかと思っていくつか調べたが、どう考えても触っていた場所を戻してもエラーを吐くのでそこではない模様。結局.auxが不正な形式になっているため、.auxを含む複数のファイルを全部手動で消してもう一回platexしたらうまくいった。こんなこともあるんやね。

** <2016-03-08 火 01:10>
go言語でのhtmlパーサpupを使うために
apt_install golang
go get github.com/ericchiang/pup

** <2016-03-11 金 13:51>
一昨日kona-linuxにしようとしてそのあとは結局一部うまくいかなかった。kona-linuxに興味もっていくつか入れてみた。デザインはきれいだったがいくつか問題があった。これは通常debianだが、思ってた以上にパッケージが少なかったので採用ボツ。これのubuntuエディションはなんかinitramfで止まってしまい立ち上がらず。結局今はもともとあったUbuntu入れて使ってる。なぜか日本語有効になっていないのが気になるけど。近々Archlinuxに移す予定。
今回ハマって学んだことメモしとく。

USBは別として通常はインストールしたらBIOSの起動方式をUEFIからCMSに移さないと機動しない。CSMが従来の起動方式。UEFIは高速起動(?)みたいなもので特別な手順を踏まないとOSやLiveCDから立ち上がらない。
MBR(MasterBootRecord)はパーティション先頭の５１２バイト部分にある特別な部分で、ここにgrubなどのBootstrapを入れる方法がある。Ubuntu使ってた時は意識しする必要なかったがこれの意味がわからずに少し戸惑ってしまった。

mozc入れてあればemacs-mozc入れてemacsでの日本語入力は可能になる。fcitx使う場合にはここでmozc-日本語追加しないと通常アプリでは日本語でない

** <2016-03-12 土 13:44>
chmod -R 644 Dropbox
これでパーミションが文字化けしてバグった。
これではなくfindとか使ってパス展開してやるのが正攻法のよう。
あとディレクトリサイズ確認はdf -h ではなく、du -h
cat /procc/version でディストリ種類出力

** <2016-03-12 土 13:46>
   archlinux installメモ cf:
   http://cocoa-tips.com/?p=138

loadkeys jp106
cgdisk /dev/sda
・[New]
・first sector:このままリターン
・サイズを 100M で入力
・タイプはデフォルト値でそのままリターン linux partitionになる。
名前は bootとでも入れておく。　名前はなくても良い。
次も
・[New]
・first sector:このままリターン
・size:このままリターン
・タイプ:このままリターン
・名前: /　入力。　名前はなくても良い。
cgdiskは一番上に1007Kibのfree スペースが取られるので、最後にこの部分を選択
・[New]
・first sector: そのままリターン
・last sector:　そのままリターン
タイプのところだけ注意。ef02 を入力。　名前は不要。
以上を実行すると下記の画面になるはずなのでその後[Write][Quit]でパーティションは終了。

mkfs.ext4 /dev/sda2 
mkfs.ext4 /dev/sda1
mount /dev/sda2 /mnt
mkdir /mnt/boot 
mount /dev/sda1 /mnt/boot

# jpのミラーを行頭に持ってくる
nano /etc/pacman.d/mirrorlist
# 最低限とってくる
pacstrap /mnt base base-devel networkmanager
# chroot
genfstab -U -p /mnt >> /mnt/etc/fstab
arch-chroot /mnt /bin/bash

sudo nano /etc/locale.gen


#en_US.UTF-8
#ja_JP.UTF-8
の行頭をアンコメント

 locale-gen
 echo LANG=en_US.UTF-8 >> /etc/locale.conf
 echo KEYMAP=jp106 >> /etc/vconsole.conf
 ln -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
 hwclock --systohc --utc
 echo Arch >>  /etc/hostname
 mkinitcpio -p linux
 passwd

 pacman -S grub-bios
 grub-install ---recheck /dev/sda
 grub-mkconfig -o /boot/grub/grub.cfg
systemctl enable NetworkManager.service
 exit
 umount /mnt/{boot,}
 shutdown -h now

*** install後
# 日本語が文字化けするのではじめは英語環境にしておく
export LANG=en_US.UTF-8
pacman -Syu

# 
pacman -S zsh git sudo xorg-server xf86-video-intel xf86-input-synaptic
# mateはひとつずつ最小要素をインストールしていく感じっぽい
pacman -S mate mate-terminal firefox emacs xorg-server xorg-utils xorg-xinit mate-common mate-utils mate-themes 

nano /etc/sudoers
# で編集画面を開き
# root ALL=(ALL) ALLの下に
# ユーザー名 ALL=(ALL) ALL
# これをしてはじめてnikkeでsudoが可能となる

useradd -m -g wheel nikke -s /bin/zsh
passwd nikke 
# to log in nikke
exit 
git clone https://github.com/sablet/.emacs.d.git
ln -s .emacs.d/zshrc .zshrc
cp /etc/x11/xinit

# 前はできなかったが
sudo pacman -S --needed base-devel

# package-queryが使えなくなっているため
git clone https://aur.archlinux.org/package-query.git
cd package-query
makepkg -si
sudo pacman -Syu

# virtualbox関連videocard入手
sudo pacman -S virtualbox-guest-utils
sudo pacman -S virtualbox-guest-dkms

# 以下MATE環境で作業できる
cp /etc/X11/xinit/xinitrc ~/.xinitrc
# xterm to exec mate-session
sudo nano .xinitrc

startx
# mateのキーボードを日本語に変更
System->Control Center->キーボード->mozc-日本語追加

# /etc/pacman.confのはじめに以下追加
# todo require package-query
[archlinuxfr]
SigLevel = Never
Server = http://repo.archlinux.fr/$arch

pacman --sync --refresh yaourt
# yaourt　アプデ
yaourt -Syua

# 日本語入力環境
pacman -S fcitx-im fcitx-configtool fcitx-mozc
pacman -S otf-ipafont
# dropboxとってくる(Rictyも入ってる)
pacman -S dropbox 
# 初期設定(ipa font 必要)
dropbox 
systemctl enable dropbox@username

# 入力メソッドの追加からmozc-日本語を追加する
fcitx-config-gtk3

** <2016-03-13 日 22:34>

emacs折り返し表示:
toggle-truncate-lines

firefoxで(C-u)でhtmlソース表示できることが偶然発見した。
場合によっては使えるかも。

** <2016-03-14 Mon 23:22>
icon all hide:
dconf write /org/mate/desktop/background/show-desktop-icons false

** <2016-03-15 Tue 08:53>
	 nettworkmanager
sudo pacman -S gnome-icon-theme network-manager-applet gnome-keyring
** <2016-03-15 Tue 17:40>
WARPSTAR
27FD8A5F66FE1

redshift-gtk
pacman -S python ipython 
yaourt -S python-gobject python-xdg

google_search 
todo requre nkf,jq,wget
yaourt -S jq wget

pacman -S goldendict evince

sound driver
sudo pacman -S alsa-utils pulseaudio

#nkf install
wget http://jaist.dl.sourceforge.jp/nkf/48945/nkf-2.1.1.tar.gz
tar zxvf nkf-2.1.1.tar.gz
cd nkf-2.1.1
make
# /usr/localの中のbinとmanにインストールされる
make install

emacsの日本語入力をfcitxでやる方法を探していたが、結局うまいものが見つからなかった。ibusとの依存関係の問題でfcitxからibusに写った。
** <2016-03-16 Wed 08:38>
uname -a でosなどの情報出力
Linux Arch 4.4.5-1-ARCH #1 SMP PREEMPT Thu Mar 10 07:38:19 CET 2016 x86_64 GNU/Linux

# virtualbox install (host arch)
gpasswd -a username vboxusers
pac_install linux-headers 
pac_install virtualbox-host-dkms
sudo /sbin/rcvboxdrv setup

# wine
# 以下を/etc/pacman.confに追加
[multilib]
Include = /etc/pacman.d/mirrorlist
pac_install wine wine-mono wine-gecko
mv .wine 

tex環境
pac_install texlive-core texlive-langjapanese texlive-science 
# 日本語表示
pac_install poppler-data
# 自作自動読み込み
pac_install inotify-tools
# braket.styないので自分でとってくる
sudo cd /usr/share/texmf-dist/tex/latex/
sudo mkdir braket
sudo cd braket
sudo wget http://mirrors.ctan.org/macros/latex/contrib/braket/braket.sty
sudo mktexlsr # 更新

# beamer
# 依存性危ないけど諦めた
yaourt -S latex-beamer 
pac_install texlive-fontsextra
sudo cd /usr/share/texmk-dist/tex/latex/
sudo mkdir contrib
sudo mkdir contrib/beamer-contrib
sudo cd contrib/beamer/contrib
sudo wget http://mirrors.ctan.org/macros/latex/contrib/beamer-contrib/bxdpx-beamer/bxdpx-beamer.sty
sudo wget http://www.ctan.org/tex-archive/fonts/lxfonts
** <2016-03-17 Thu 10:16>
	 yaourt -S kupfer
** <2016-03-17 Thu 14:32>
archでのsendmail 設定の仕方　cf :
http://superuser.com/questions/233627/setting-up-mail-client-on-arch-linux

まずsendmail自体は正確にファイルやデータベースの配置をしないとうまく動いてくれないので、現在はsendmailを使いやすいように設計されたpostfix,smstpなどのソフトを使う方法が主流かも。あとpacmanからsendmailは手に入らないようになっているが、実際にはpostfix,smstpなどは手に入るためこれを経由してsendjpmailを使うのがいい。

pac_install postfix


    Update /etc/postfix/main.cf:
		
>>
    relayhost = [smtp.gmail.com]:587
    smtp_tls_security_level = encrypt
    smtp_tls_CApath = /etc/ssl/certs
    smtp_sasl_auth_enable = yes
    smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
    smtp_sasl_security_options = noanonymous


    Create /etc/postfix/sasl_passwd:
>>
    [smtp.gmail.com]:587     joe@gmail.com:JoesSekritPassword

    Run as root:
>>
    postmap /etc/postfix/sasl_passwd
    chmod 640 /etc/postfix/sasl_passwd*
    chgrp postfix /etc/postfix/sasl_passwd*
    postfix (reload|start)

** <2016-03-17 Thu 16:00>
semdmailはできたが、base64で変換したファイルが結局うまくいかなかったので、前作ったgmailAPIを利用した。

ファイルサイズ確認 wc -c hoge.pdf 
画像ビューア pac_install gthumb
pup yaourt -S pup-git :失敗
よく見たら普通にlinuxのバイナリ落ちてた。。。

wget -O - hoge.html | pup json{} --color 
でhtmlをいい感じのjsonに変換してくれる。
まだ使い込んでいないが、見た感じ
html(pupで処理)
->json(jqで処理)の流れがよさそう。
サンプル
cat ~/Downloads/hibiki.html|pup 'img[width="560"]' json{}|jq '.[].src'|xargs wget

shell if(ltが左小さい)
test num1 -gt num2 <=> num1 > num2
test num1 -lt num2 <=> num1 < num2

pac_install python-virtualenv python-virtualenv-wrapper
cd $WORK_ON_HOME
virtualenv -p /usr/bin/python2.7 env2
cd env2
pip install numpy
# 一度に入れたら止まってしまった numpyの依存関係？
pip install matplotlib chainer 
# scipyでまたはまった。今回は完全にfortranの問題だったっぽい
pac_install gcc-fortran
pip install scipy scikit-learn pybrain

# cronでterminalでアスキーアートっぽいの表示するにはxtermが便利みたい
DISPLAY=:0 mate-terminal -hold -e "source ~/.zshrc;forecast|less"
# 以下今回のためのxterm設定
pac_install xorg-xrdb
xrdb .Xresources

${#a}:$aの文字列の長さ

** <2016-03-18 Fri 09:55>
シェル呼び出して直接実行：
/bin/z sh -c "echo Hello"
あとzshはinteractiveに動かすと/etc/zshrcなどから読み出すみたい。
解決策としては下みたいに強制的に読み込ませる
zsh -i -c hoge-func

今回はcronの代わりになるsystemctlを使ってみた。
これでxtermで天気予報を表示する

systemctl は第一引数に--system,--userをとることができる
--system /etc/systemd/system のservice,timerを見る(要root)
--user  ~/.config/systemd/user のservice,timerを見る
ユーザのシステム環境に以下２つファイルを置く

# cat forecast.service
[Unit]
Description=forecast display by xterm

[Service]
Type=simple
#ExecStart=/bin/sh -c "echo hello"
ExecStart=/usr/bin/zsh -i -c forecast_display

[Install]
WantedBy=default.target

# cat forecast.timer
[Unit]
Description=forecast display timer

[Timer]
#OnBootSec=1min
#OnUnitActiveSec=10sec
OnCalendar=*-*-* 03:57:00
Unit=forecast.service

[Install]
WantedBy=timers.target

# my_libarary.sh
forecast_display() {
  DISPLAY=:0
  xterm -hold -e zsh -c "zsh -i -c 'forecast \*' |less"
}

このときzshは上のオプションが必要
これを書いたあとにリロード、スタートをすることでtimerが開始する
systemctl --user daemon-reload
systemctl --user start forecast.timer

これでタイマーが動いているか確認できる
systemctl --user list-timers

これで動いているサービスの動き確認
journalctl --user -f

# 以下でpacmanのinstall済表示
pacman -Q 
# -Qの下位ディレクトリも表示
pacman -Ql

** <2016-03-19 Sat 14:23>
wineのフォントエラーはレジストリとか関係なく以下でできた
winetricks allfonts

virtualenvでipython3しか入ってないと思ってたが、
そもそもipythonが仮想環境に入っていなかった
pip install ipython

win default32bitにするため
WINEPREFIX=$HOME/prefix32 WINEARCH='win32' wine 'wineboot'

wine音でない
winetrick -> change setting 
enable alsa,pulseaudio

音量調節をterminalから
alsamixer
pac_install nomacs

** <2016-03-20 Sun 22:34>
うっかりヒアドキュメントでこのファイルに追記しようとしたら誤って上書きしてしまった。
幸い復元できたのでよかった。ただこれからはzshに追記用の関数を書いたので、それを利用してミスタイプを防ぎたい

** <2016-03-23 Wed 14:30>
マルチモニターショートカット Super+Shift+arrow

** <2016-03-24 Thu 20:45>
du -sh
-s: ディレクトリの合計サイズのみ
-h: K,Mなど適切なサイズ表示

ipython tips:
object? 
objectのtype,initなど詳細を見られる
object?? でソースも表示

実行履歴を保存
%save fname 1-999
第２引数に保存行を指定しないと動かない

** <2016-03-27 Sun 15:30>
pybrainでいろいろやってたらmatplotlibのグラフが描画されない。
arch限定の症状のようで、qtとかのライブラリや設定ファイルがデフォルトで入っていないのが原因の模様。
今回pipでとってきてあったのでpacmanでmatplotとってくれば変わるのではないかと予想。
ただpython-pytzというライブラリがとってこれなかったのでpacmanアップデート。
これに気づくのにそこそこ時間をかけてしまった。
ubuntuと違い更新頻度が高いためにこういった症状はちょくちょく起こるもよう。
あとpacman全部アプデすると時間かかるので暇なときにやっておくのがよさそう。

結論からいうと仮想環境にqtとか入らないと意味ないっぽい
けっきょくソースとってきてやるのが一番はやかった
以下仮想python環境

wget http://sourceforge.net/projects/pyqt/files/sip/sip-4.17/sip-4.17.tar.gz
tar zxf sip-4.17.tar.gz
cd sip-4.17
python configure.py
make
sudo make install
cd ..
wget http://sourceforge.net/projects/pyqt/files/PyQt5/PyQt-5.5.1/PyQt-gpl-5.5.1.tar.gz
tar zxf PyQt-gpl-5.5.1.tar.gz
cd PyQt-gpl-5.5.1
python3 configure.py
make
sudo make install # むっちゃ時間かかるので注意

# configファイル名確認
import matplotlib
matplotlib.matplotlib_fname()

# 変更箇所
diff /home/nikke/workspace/virtual_python_env/env2/lib/python2.7/site-packages/matplotlib/mpl-data/ /usr/lib/python2.7/site-packages/matplotlib/mpl-data/matplotlibrc

--- $HOME/.pyenv/versions/3.5.0/lib/python3.5/site-packages/matplotlib/mpl-data/matplotlibrc 2015-12-13 18:54:09.000000000 +0900
+++ $HOME/.config/matplotlib/matplotlibrc   2015-12-14 07:46:21.760050011 +0900
@@ -35,7 +35,7 @@
 # You can also deploy your own backend outside of matplotlib by
# referring to the module name (which must be in the PYTHONPATH) as
 # 'module://my_backend'.
-backend      : agg
+backend      : Qt5Agg
 
 # If you are using the Qt4Agg backend, you can choose here
 # to use the PyQt4 bindings or the newer PySide bindings to


** <2016-03-29 Tue 15:41>
sshがpacmanのopensshで入る
whereで関数のソースを呼び出せるみたい

ssh導入手順(git)
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
# file location, password enter
ssh-add ~/.ssh/id_rsa

ホストにrsaを置く。
(githubの場合はsshkeyをコピペして置く)
cat ~/.ssh/id_rsa.pub

新しいgitリポジトリ作る場合
git init
git_my_config(script)
git remote add origin git@github.com:sablet/bar.git

研究室のパソコンにてwin10+Ubuntuのデュアルブートに挑戦中。
以前も同じような症状を経験した覚えがあるがどうやったか覚えてない
ひとまずgrubからカーネル指定して起動するのを試してみる。

ls (memdisk),(hd0,gpt1),...,(hd1,gpt5),...,(hd1,gpt1),(hd2)
ls (hd0,gpt5)
widows,ext*,...

set root=(hd0,4)
linux /boot/vmlinux-~~-generic root=/dev/sda4
initrd /boot/initrd,img~~~~
boot

結局上の方法では立ち上がらなかった

それで調べたらboot managerってのがデバイスだけではなく、OSの順番もUEFI画面(BIOS?)から変更できることがわかった。
普通にUbuntuはインストールできていて認識もされていたのでそこで起動順番変更したら一瞬で立ち上がった。
なんか悲しい・・・

Ubuntuのpython仮想環境ですぐにできるかと思ったが、
いくつか基礎レイヤのライブラリをaptで入れる必要があるみたい。

1. libpack.so 3 がない
=> apt_install libatlas-base-dev liblapack-dev
2.


* 04
** <2016-04-01 Fri 00:18>
dateを使って時間を測るスクリプト作ろうと思って調べてたら、まさかのtimerコマンドあった（笑）
さすがにこれは予想外やけどかなり使えそう。
ストップウォッチみたいに使うには$ time cat -> C-d で終わるまでの時間はかれる。
ただtimeとうつと出てくるのはbashの組み込みコマンドでそれとは別のgnu timeは
pac_install time とかして /usr/bin/time に保存される
ex. /usr/bin/time -o /tmp/logfile cat
先読み後読み 
pcregrep -o '[\d{0,}:]?\d{1,2}(?=:\d{2})'　先読み
pcregrep -o '[\d{0,}:]?\d{1,2}(?<=:\d{2})'　後よみ
否定は = を ! に変える

シェルで何行目かhead -n 1,など

** <2016-04-02 土 22:19>
$ echo {1..20} 
=> 1 2 3 ... 20 と出力される

** <2016-04-04 月 14:52>
pdf内の文章検索方法
まずpdfをテキストに変換するツールとしてxpdfについてくるpdftotextコマンドがかなり便利。少なくともapt-getでxpdfして入れられるみたい。使い方としては第一引数に元のpdfを、第二引数に変換後の出力したいテキストファイル名を入れる。第二引数に "-" で標準出力にテキスト出す。pdfの他にもword,excelなどもする方法があるよう。


xorgs -I{} echo aa{}aa で好きな場所に引数入れられる
** <2016-04-09 土 09:19>
パスが存在するか
if [ -e ./test ]; then
ファイルが存在するか
if [ -f ./test ]; then
ディレクトリが存在するか
if [ -d ./test ]; then
リンクが存在するか
if [ -L ./test ]; then
空ファイルではないか
if [ -s ./test ]; then
ファイルが書込可能か
if [ -w ./test ]; then
ファイルが実行可能か
if [ -x ./test ]; then
編集リクエストを送る
** <2016-04-10 Sun 23:13>
hub create でgithubにリポジトリ作成可能
README.md とか作って、全体をpushするの忘れずに
sudo apt-get install pepperflashplugin-nonfree
sudo update-pepperflashplugin-nonfree --install
$ sudo apt-get update
$ sudo apt-get install fonts-arphic-uming
$ sudo fc-cache -fv

uming.ttc (「AR PL Uming」フォントのファイル) を TakaoPGothic.ttf (「Takao Pゴシック」フォントのファイル) 等に置き換える。
$ cd /usr/share/fonts/truetype/arphic
$ sudo cp -p ../takao-gothic/TakaoPGothic.ttf uming.ttc

** <2016-04-13 Wed 09:33>
今日昨日とFXの設定をいくつかやっていた。Flashで日本語が表示されない問題に関しては以下コマンドで解決した。あとなぜか今emacsでの日本語表示が快適に打てている。いろいろ触ったのでどこが原因かわからない…　あとwineでのfirefoxも試したが絶望的に遅かった。
yaourt -S ttf-kochi-substitute
** <2016-04-13 水 22:13>
zenity関係はここのページが画像込でいろいろ載ってる
http://hitaki.net/diary/20071230.html

** <2016-04-15 金 19:49>
terminalの分割にはtmuxが割と伝統的に使えてCUI環境でも便利みたい。ただX環境でgnome-terminalとか使うならterminatorのほうが使いやすいかもしれない。
試しにいくつか使っているがとりあえず水平分割を(S-C-o),フォーカス移動を(M-Up)でできることさえ覚えておけば多分困らない。

シェルスクリプトにおける空文字判定はifでやってもちょいちょいうまくいかない。確実にやるにはtest で空文字か確かめるオプションを使うほうがいい(-z)
test -z $bar ゼロサイズ判定(bar == 未定義 or bar == "")
test -n $bar 未定義か判定

** <2016-04-18 月 17:50>
translate to UTF-8
nkf -w USDJPY.csv > foo.csv

pythonでunixこまんど
os.system("ls -a") # 成功すれば0が返り値
commands.getoutput("ls -la") # 実際に実行した結果が帰ってくる

gnuplotをubuntuで使おうとするとグラフが表示されない
解決方法としてはgnuplot-x11をインストールするだけ

sampleとして
plot sin(x)
replot cos(x)

通常はスペース区切りファイルを使うものなのでcsv対応にするには次のコマンド
set datafile separator ","
plot 'bar.csv' using 1:2

** <2016-04-21 木 15:40>
lstmで株価の予測をする論文を見ていた。ただこれらがどうも何を言っているかわかっていなかった原因が株式の用語が理解できていなかったのがひとつの原因であるみたい。やはりFXと株価はけっこう考え方などが違う気がする。

** <2016-04-22 金 18:32>
以前chainerがうまく使えなかったので、
今回kerasというtensorflo,theanoo両方対応のラッパーをセットアップした。

! CUDA7.0はinstall済仮定

tensorflow(GPU)

# virtualenvからでないとうまくtensorflowを読んでくれない(原因不明)

git clone --recurse-submodules https://github.com/tensorflow/tensorflow
virtualenv --system-site-packages ~/tensorflow-GPU

> ~/.zshrc
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/cuda/lib64"
export CUDA_HOME=/usr/local/cuda

! bashで実行
source tensorflow/configure

keras

export KERAS_BACKEND=tensorflow
git clone https://github.com/fchollet/keras.git
cd keras
python setup.py install

パスがpythonの読み込みに入っていないようで、~/git_dir/keras　に入らないと
import kerasできない

ipythonでソースを部分的に貼り付けするときは、%pasteでできるみたい

** 160423
np.loadtxt(usecols=(2,)

** 160423
jsonファイルはcatで標準出力に出したものを"jq ."で処理すればいい感じの色になって出力してくれる。
このときにクオート' 'で囲むとうまくjqが解釈できないので注意
** 160423
modelの重みをhdf5で保存できるようなので、これを扱うためのlibrary,viewrをaptでインストール
apt_install hdfviewer
apt_install python-hdf5
